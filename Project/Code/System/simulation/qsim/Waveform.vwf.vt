// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/10/2024 00:59:40"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    System
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module System_vlg_sample_tst(
	clk,
	sensor_in,
	sensor_out,
	sampler_tx
);
input  clk;
input  sensor_in;
input  sensor_out;
output sampler_tx;

reg sample;
time current_time;
always @(clk or sensor_in or sensor_out)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module System_vlg_check_tst (
	count_debug,
	LCD_data,
	LCD_E,
	LCD_RS,
	LCD_RW,
	Led_in,
	Led_out,
	out_servo_in,
	out_servo_out,
	sampler_rx
);
input [6:0] count_debug;
input [7:0] LCD_data;
input  LCD_E;
input  LCD_RS;
input  LCD_RW;
input  Led_in;
input  Led_out;
input  out_servo_in;
input  out_servo_out;
input sampler_rx;

reg [6:0] count_debug_expected;
reg [7:0] LCD_data_expected;
reg  LCD_E_expected;
reg  LCD_RS_expected;
reg  LCD_RW_expected;
reg  Led_in_expected;
reg  Led_out_expected;
reg  out_servo_in_expected;
reg  out_servo_out_expected;

reg [6:0] count_debug_prev;
reg [7:0] LCD_data_prev;
reg  LCD_E_prev;
reg  LCD_RS_prev;
reg  LCD_RW_prev;
reg  Led_in_prev;
reg  Led_out_prev;
reg  out_servo_in_prev;
reg  out_servo_out_prev;

reg [6:0] count_debug_expected_prev;
reg [7:0] LCD_data_expected_prev;
reg  LCD_E_expected_prev;
reg  LCD_RS_expected_prev;
reg  LCD_RW_expected_prev;
reg  Led_in_expected_prev;
reg  Led_out_expected_prev;
reg  out_servo_in_expected_prev;
reg  out_servo_out_expected_prev;

reg [6:0] last_count_debug_exp;
reg [7:0] last_LCD_data_exp;
reg  last_LCD_E_exp;
reg  last_LCD_RS_exp;
reg  last_LCD_RW_exp;
reg  last_Led_in_exp;
reg  last_Led_out_exp;
reg  last_out_servo_in_exp;
reg  last_out_servo_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	count_debug_prev = count_debug;
	LCD_data_prev = LCD_data;
	LCD_E_prev = LCD_E;
	LCD_RS_prev = LCD_RS;
	LCD_RW_prev = LCD_RW;
	Led_in_prev = Led_in;
	Led_out_prev = Led_out;
	out_servo_in_prev = out_servo_in;
	out_servo_out_prev = out_servo_out;
end

// update expected /o prevs

always @(trigger)
begin
	count_debug_expected_prev = count_debug_expected;
	LCD_data_expected_prev = LCD_data_expected;
	LCD_E_expected_prev = LCD_E_expected;
	LCD_RS_expected_prev = LCD_RS_expected;
	LCD_RW_expected_prev = LCD_RW_expected;
	Led_in_expected_prev = Led_in_expected;
	Led_out_expected_prev = Led_out_expected;
	out_servo_in_expected_prev = out_servo_in_expected;
	out_servo_out_expected_prev = out_servo_out_expected;
end


// expected count_debug[ 6 ]
initial
begin
	count_debug_expected[6] = 1'bX;
end 
// expected count_debug[ 5 ]
initial
begin
	count_debug_expected[5] = 1'bX;
end 
// expected count_debug[ 4 ]
initial
begin
	count_debug_expected[4] = 1'bX;
end 
// expected count_debug[ 3 ]
initial
begin
	count_debug_expected[3] = 1'bX;
end 
// expected count_debug[ 2 ]
initial
begin
	count_debug_expected[2] = 1'bX;
end 
// expected count_debug[ 1 ]
initial
begin
	count_debug_expected[1] = 1'bX;
end 
// expected count_debug[ 0 ]
initial
begin
	count_debug_expected[0] = 1'bX;
end 
// expected LCD_data[ 7 ]
initial
begin
	LCD_data_expected[7] = 1'bX;
end 
// expected LCD_data[ 6 ]
initial
begin
	LCD_data_expected[6] = 1'bX;
end 
// expected LCD_data[ 5 ]
initial
begin
	LCD_data_expected[5] = 1'bX;
end 
// expected LCD_data[ 4 ]
initial
begin
	LCD_data_expected[4] = 1'bX;
end 
// expected LCD_data[ 3 ]
initial
begin
	LCD_data_expected[3] = 1'bX;
end 
// expected LCD_data[ 2 ]
initial
begin
	LCD_data_expected[2] = 1'bX;
end 
// expected LCD_data[ 1 ]
initial
begin
	LCD_data_expected[1] = 1'bX;
end 
// expected LCD_data[ 0 ]
initial
begin
	LCD_data_expected[0] = 1'bX;
end 

// expected LCD_E
initial
begin
	LCD_E_expected = 1'bX;
end 

// expected LCD_RS
initial
begin
	LCD_RS_expected = 1'bX;
end 

// expected LCD_RW
initial
begin
	LCD_RW_expected = 1'bX;
end 

// expected Led_in
initial
begin
	Led_in_expected = 1'bX;
end 

// expected Led_out
initial
begin
	Led_out_expected = 1'bX;
end 

// expected out_servo_in
initial
begin
	out_servo_in_expected = 1'bX;
end 

// expected out_servo_out
initial
begin
	out_servo_out_expected = 1'bX;
end 
// generate trigger
always @(count_debug_expected or count_debug or LCD_data_expected or LCD_data or LCD_E_expected or LCD_E or LCD_RS_expected or LCD_RS or LCD_RW_expected or LCD_RW or Led_in_expected or Led_in or Led_out_expected or Led_out or out_servo_in_expected or out_servo_in or out_servo_out_expected or out_servo_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected count_debug = %b | expected LCD_data = %b | expected LCD_E = %b | expected LCD_RS = %b | expected LCD_RW = %b | expected Led_in = %b | expected Led_out = %b | expected out_servo_in = %b | expected out_servo_out = %b | ",count_debug_expected_prev,LCD_data_expected_prev,LCD_E_expected_prev,LCD_RS_expected_prev,LCD_RW_expected_prev,Led_in_expected_prev,Led_out_expected_prev,out_servo_in_expected_prev,out_servo_out_expected_prev);
	$display("| real count_debug = %b | real LCD_data = %b | real LCD_E = %b | real LCD_RS = %b | real LCD_RW = %b | real Led_in = %b | real Led_out = %b | real out_servo_in = %b | real out_servo_out = %b | ",count_debug_prev,LCD_data_prev,LCD_E_prev,LCD_RS_prev,LCD_RW_prev,Led_in_prev,Led_out_prev,out_servo_in_prev,out_servo_out_prev);
`endif
	if (
		( count_debug_expected_prev[0] !== 1'bx ) && ( count_debug_prev[0] !== count_debug_expected_prev[0] )
		&& ((count_debug_expected_prev[0] !== last_count_debug_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count_debug[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_debug_expected_prev);
		$display ("     Real value = %b", count_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_debug_exp[0] = count_debug_expected_prev[0];
	end
	if (
		( count_debug_expected_prev[1] !== 1'bx ) && ( count_debug_prev[1] !== count_debug_expected_prev[1] )
		&& ((count_debug_expected_prev[1] !== last_count_debug_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count_debug[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_debug_expected_prev);
		$display ("     Real value = %b", count_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_debug_exp[1] = count_debug_expected_prev[1];
	end
	if (
		( count_debug_expected_prev[2] !== 1'bx ) && ( count_debug_prev[2] !== count_debug_expected_prev[2] )
		&& ((count_debug_expected_prev[2] !== last_count_debug_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count_debug[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_debug_expected_prev);
		$display ("     Real value = %b", count_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_debug_exp[2] = count_debug_expected_prev[2];
	end
	if (
		( count_debug_expected_prev[3] !== 1'bx ) && ( count_debug_prev[3] !== count_debug_expected_prev[3] )
		&& ((count_debug_expected_prev[3] !== last_count_debug_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count_debug[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_debug_expected_prev);
		$display ("     Real value = %b", count_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_debug_exp[3] = count_debug_expected_prev[3];
	end
	if (
		( count_debug_expected_prev[4] !== 1'bx ) && ( count_debug_prev[4] !== count_debug_expected_prev[4] )
		&& ((count_debug_expected_prev[4] !== last_count_debug_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count_debug[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_debug_expected_prev);
		$display ("     Real value = %b", count_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_debug_exp[4] = count_debug_expected_prev[4];
	end
	if (
		( count_debug_expected_prev[5] !== 1'bx ) && ( count_debug_prev[5] !== count_debug_expected_prev[5] )
		&& ((count_debug_expected_prev[5] !== last_count_debug_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count_debug[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_debug_expected_prev);
		$display ("     Real value = %b", count_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_debug_exp[5] = count_debug_expected_prev[5];
	end
	if (
		( count_debug_expected_prev[6] !== 1'bx ) && ( count_debug_prev[6] !== count_debug_expected_prev[6] )
		&& ((count_debug_expected_prev[6] !== last_count_debug_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count_debug[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_debug_expected_prev);
		$display ("     Real value = %b", count_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_debug_exp[6] = count_debug_expected_prev[6];
	end
	if (
		( LCD_data_expected_prev[0] !== 1'bx ) && ( LCD_data_prev[0] !== LCD_data_expected_prev[0] )
		&& ((LCD_data_expected_prev[0] !== last_LCD_data_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_data_expected_prev);
		$display ("     Real value = %b", LCD_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LCD_data_exp[0] = LCD_data_expected_prev[0];
	end
	if (
		( LCD_data_expected_prev[1] !== 1'bx ) && ( LCD_data_prev[1] !== LCD_data_expected_prev[1] )
		&& ((LCD_data_expected_prev[1] !== last_LCD_data_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_data_expected_prev);
		$display ("     Real value = %b", LCD_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LCD_data_exp[1] = LCD_data_expected_prev[1];
	end
	if (
		( LCD_data_expected_prev[2] !== 1'bx ) && ( LCD_data_prev[2] !== LCD_data_expected_prev[2] )
		&& ((LCD_data_expected_prev[2] !== last_LCD_data_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_data_expected_prev);
		$display ("     Real value = %b", LCD_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LCD_data_exp[2] = LCD_data_expected_prev[2];
	end
	if (
		( LCD_data_expected_prev[3] !== 1'bx ) && ( LCD_data_prev[3] !== LCD_data_expected_prev[3] )
		&& ((LCD_data_expected_prev[3] !== last_LCD_data_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_data_expected_prev);
		$display ("     Real value = %b", LCD_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LCD_data_exp[3] = LCD_data_expected_prev[3];
	end
	if (
		( LCD_data_expected_prev[4] !== 1'bx ) && ( LCD_data_prev[4] !== LCD_data_expected_prev[4] )
		&& ((LCD_data_expected_prev[4] !== last_LCD_data_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_data_expected_prev);
		$display ("     Real value = %b", LCD_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LCD_data_exp[4] = LCD_data_expected_prev[4];
	end
	if (
		( LCD_data_expected_prev[5] !== 1'bx ) && ( LCD_data_prev[5] !== LCD_data_expected_prev[5] )
		&& ((LCD_data_expected_prev[5] !== last_LCD_data_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_data_expected_prev);
		$display ("     Real value = %b", LCD_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LCD_data_exp[5] = LCD_data_expected_prev[5];
	end
	if (
		( LCD_data_expected_prev[6] !== 1'bx ) && ( LCD_data_prev[6] !== LCD_data_expected_prev[6] )
		&& ((LCD_data_expected_prev[6] !== last_LCD_data_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_data_expected_prev);
		$display ("     Real value = %b", LCD_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LCD_data_exp[6] = LCD_data_expected_prev[6];
	end
	if (
		( LCD_data_expected_prev[7] !== 1'bx ) && ( LCD_data_prev[7] !== LCD_data_expected_prev[7] )
		&& ((LCD_data_expected_prev[7] !== last_LCD_data_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_data_expected_prev);
		$display ("     Real value = %b", LCD_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LCD_data_exp[7] = LCD_data_expected_prev[7];
	end
	if (
		( LCD_E_expected_prev !== 1'bx ) && ( LCD_E_prev !== LCD_E_expected_prev )
		&& ((LCD_E_expected_prev !== last_LCD_E_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_E :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_E_expected_prev);
		$display ("     Real value = %b", LCD_E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LCD_E_exp = LCD_E_expected_prev;
	end
	if (
		( LCD_RS_expected_prev !== 1'bx ) && ( LCD_RS_prev !== LCD_RS_expected_prev )
		&& ((LCD_RS_expected_prev !== last_LCD_RS_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_RS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_RS_expected_prev);
		$display ("     Real value = %b", LCD_RS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LCD_RS_exp = LCD_RS_expected_prev;
	end
	if (
		( LCD_RW_expected_prev !== 1'bx ) && ( LCD_RW_prev !== LCD_RW_expected_prev )
		&& ((LCD_RW_expected_prev !== last_LCD_RW_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCD_RW :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCD_RW_expected_prev);
		$display ("     Real value = %b", LCD_RW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LCD_RW_exp = LCD_RW_expected_prev;
	end
	if (
		( Led_in_expected_prev !== 1'bx ) && ( Led_in_prev !== Led_in_expected_prev )
		&& ((Led_in_expected_prev !== last_Led_in_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_in :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_in_expected_prev);
		$display ("     Real value = %b", Led_in_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Led_in_exp = Led_in_expected_prev;
	end
	if (
		( Led_out_expected_prev !== 1'bx ) && ( Led_out_prev !== Led_out_expected_prev )
		&& ((Led_out_expected_prev !== last_Led_out_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_out_expected_prev);
		$display ("     Real value = %b", Led_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Led_out_exp = Led_out_expected_prev;
	end
	if (
		( out_servo_in_expected_prev !== 1'bx ) && ( out_servo_in_prev !== out_servo_in_expected_prev )
		&& ((out_servo_in_expected_prev !== last_out_servo_in_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_servo_in :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_servo_in_expected_prev);
		$display ("     Real value = %b", out_servo_in_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_servo_in_exp = out_servo_in_expected_prev;
	end
	if (
		( out_servo_out_expected_prev !== 1'bx ) && ( out_servo_out_prev !== out_servo_out_expected_prev )
		&& ((out_servo_out_expected_prev !== last_out_servo_out_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_servo_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_servo_out_expected_prev);
		$display ("     Real value = %b", out_servo_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_servo_out_exp = out_servo_out_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module System_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg sensor_in;
reg sensor_out;
// wires                                               
wire [6:0] count_debug;
wire [7:0] LCD_data;
wire LCD_E;
wire LCD_RS;
wire LCD_RW;
wire Led_in;
wire Led_out;
wire out_servo_in;
wire out_servo_out;

wire sampler;                             

// assign statements (if any)                          
System i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.count_debug(count_debug),
	.LCD_data(LCD_data),
	.LCD_E(LCD_E),
	.LCD_RS(LCD_RS),
	.LCD_RW(LCD_RW),
	.Led_in(Led_in),
	.Led_out(Led_out),
	.out_servo_in(out_servo_in),
	.out_servo_out(out_servo_out),
	.sensor_in(sensor_in),
	.sensor_out(sensor_out)
);

// clk
always
begin
	clk = 1'b0;
	clk = #500 1'b1;
	#500;
end 

// sensor_in
initial
begin
	sensor_in = 1'b0;
end 

// sensor_out
initial
begin
	sensor_out = 1'b1;
end 

System_vlg_sample_tst tb_sample (
	.clk(clk),
	.sensor_in(sensor_in),
	.sensor_out(sensor_out),
	.sampler_tx(sampler)
);

System_vlg_check_tst tb_out(
	.count_debug(count_debug),
	.LCD_data(LCD_data),
	.LCD_E(LCD_E),
	.LCD_RS(LCD_RS),
	.LCD_RW(LCD_RW),
	.Led_in(Led_in),
	.Led_out(Led_out),
	.out_servo_in(out_servo_in),
	.out_servo_out(out_servo_out),
	.sampler_rx(sampler)
);
endmodule

